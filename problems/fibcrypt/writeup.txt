Analysing the program, we notice that the encryption operates through matrix multiplication.

It takes in 2 parameters, the plaintext, and a key, N

Computes the encrypted text by generating a matrix, Q, with the init() method, and calculating

E = M * Q^(2^N) (mod 256), where E is the encrypted text vector and M is the plaintext vector

This would be easy to reverse if we had N. 
We could simply compute (Q^N)^-1 and multiply it by the encrypted text character vector to get back the plaintext

However, we don't know N. 

This might lead to an attempt of a brute-force approach, but this would take a very long time to work, since N is rather large

If we take a closer look at the matrix Q that is generated, we notice that it has some special properties...

Let R = Q^N and S = Q^(N+1) and p = dim(Q)

we notice that:
S[0] = R[0]+R[1]
S[p-1] = R[0]
for i=1 to p-2
	S[i] = R[i+1]

(these properties are easy to prove w/ some linear algebra)

Doing some math out, we see that to generate E_(N+1), we only need E_N

E_(N+1)[0] = (E_N[p-1]+E_N[0]) % 256
for i=1 to p-1
	E_(N+1)[i] = E_N[i-1]

So, it is very easy to compute E_N for any N.

We know the flag starts with flag{}, so we continuously apply this process on the encrypted text until we get a string that starts with flag{}

Code for this process can be found in fibdecrypt.py